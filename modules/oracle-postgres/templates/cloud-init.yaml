#cloud-config
package_update: true
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release

runcmd:
  # Format and mount the volume
  - sleep 60  # 볼륨 attachment를 기다림
  - mkfs.ext4 -F /dev/sdb
  - mkdir -p /data
  - mount /dev/sdb /data
  - echo '/dev/sdb /data ext4 defaults,noatime 0 2' >> /etc/fstab

  # Docker 볼륨 디렉토리 생성
  - mkdir -p /data/postgres

  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl start docker
  - systemctl enable docker

  # Install Docker Compose
  - curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

  # Create docker-compose directory and env file
  - mkdir -p /data/postgres
  - cat > /data/postgres/.env << 'EOL'
POSTGRES_USER=${postgres_user}
POSTGRES_PASSWORD=${postgres_password}
POSTGRES_DB=${postgres_db}
EOL
  - chmod 600 /data/postgres/.env

  # Create docker-compose file
  - cat > /data/postgres/docker-compose.yml << 'EOL'
${docker_compose_content}
EOL

  # Start PostgreSQL
  - cd /data/postgres && docker-compose up -d
